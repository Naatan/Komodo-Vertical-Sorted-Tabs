{
  "keyboard_shortcut": "Ctrl+Shift+B", 
  "name": "Vertical Sorted Tabs", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "var view = ko.views.manager.currentView;", 
    "var tabbox = view.parentNode;", 
    "while (tabbox && tabbox.nodeName != \"tabbox\" && tabbox.nodeName != \"xul:tabbox\") {", 
    "    tabbox = tabbox.parentNode;", 
    "}", 
    "", 
    "// Vertical tabs", 
    "tabbox.setAttribute(\"orient\", \"horizontal\");", 
    "tabbox.setAttribute(\"dir\", \"reverse\");", 
    "tabbox.tabs.setAttribute(\"orient\", \"vertical\");", 
    "", 
    "// tooltipText", 
    "", 
    "var tabNames = {};", 
    "var childNodes = tabbox._tabs.childNodes;", 
    "var bits;", 
    "for (var i = 0;  i < childNodes.length; i++) {", 
    "\tvar tab = childNodes[i];", 
    "\t", 
    "\tbits = tab.tooltipText.split(\".\");", 
    "\ttab.rel = bits[bits.length-1];", 
    "\t", 
    "\tbits = tab.tooltipText.split(\"/\");", 
    "\ttab.label = bits[bits.length-1];", 
    "\t", 
    "\tcheckTabName(tab, tabNames);", 
    "}", 
    "", 
    "// Sort tabs alphabetically", 
    "for (var i = 0;  i < childNodes.length; i++) {", 
    "    for (var j = childNodes.length - 1; j > i; j--) {", 
    "        if (isBelow(childNodes[j].label,childNodes[j-1].label.substr(0,1))) {", 
    "            tabbox._tabs.insertBefore(childNodes[j], childNodes[j-1])", 
    "        }", 
    "        if (isBelow(childNodes[j].rel,childNodes[j-1].rel)) {", 
    "            tabbox._tabs.insertBefore(childNodes[j], childNodes[j-1])", 
    "        }", 
    "    }", 
    "}", 
    "", 
    "// Add margin between groups", 
    "var curType = null;", 
    "for (var j = 0;  j < childNodes.length; j++) {", 
    "    var style = childNodes[j].getAttribute('style');", 
    "    childNodes[j].setAttribute('style',style + ' border-top: 1px solid #AAAAAA !important; margin-top: 0px !important;')", 
    "    ", 
    "    if (childNodes[j].rel!=curType) {", 
    "\t\tstyle = childNodes[j].getAttribute('style');", 
    "\t\tvar margin = curType == null ? 0 : 5;", 
    "\t\tchildNodes[j].setAttribute('style',style + ' border-top: 2px solid !important; border-color: ' + strToHexColor(childNodes[j].rel) + ' !important; margin-top: '+margin+'px !important;')\t", 
    "    }", 
    "        ", 
    "    curType = childNodes[j].rel;", 
    "}", 
    "", 
    "function checkTabName(tab, tabNames)", 
    "{", 
    "\tif (tabNames[tab.label] == undefined)", 
    "\t{", 
    "\t\ttabNames[tab.label] = tab;", 
    "\t\treturn;", 
    "\t}", 
    "\t", 
    "\tvar tabExist = tabNames[tab.label];", 
    "\t", 
    "\tdelete tabNames[tab.label];", 
    "\t", 
    "\tvar tabNameNew, tabNameExist;", 
    "\tfor (var i=1;i<=5;i++)", 
    "\t{", 
    "\t\ttabNameNew = tabName(tab.tooltipText, i);", 
    "\t\ttabNameExist = tabName(tabExist.tooltipText, i);", 
    "\t\t", 
    "\t\tif (tabNameNew != tabNameExist)", 
    "\t\t\tbreak;", 
    "\t}", 
    "\t", 
    "\tif (tabNameNew == tabNameExist)", 
    "\t{", 
    "\t\treturn;", 
    "\t}", 
    "\t", 
    "\ttab.label = tabNameNew;", 
    "\ttabNames[tab.label] = tab;", 
    "\t", 
    "\ttabExist.label = tabNameExist;", 
    "\ttabNames[tabExist.label] = tabExist;", 
    "}", 
    "", 
    "function tabName(tooltip, depth)", 
    "{", 
    "\tvar bits = tooltip.split(\"/\");", 
    "\tvar name = bits[bits.length-1] + \" - \";", 
    "\t", 
    "\tvar nameBits = [];", 
    "\tfor (var i=0;i<depth;i++)", 
    "\t\tnameBits.push(bits[bits.length-(2 + i)]);", 
    "\t", 
    "\tif (nameBits.join(\"\").length > 20)", 
    "\t{", 
    "\t\tfor (var i=0;i<nameBits.length;i++)", 
    "\t\t{", 
    "\t\t\tnameBits[i] = nameBits[i].substr(0,4) + \"..\";", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\treturn name + nameBits.join(\"/\");", 
    "}", 
    "", 
    "", 
    "function isBelow(str1,str2) {", 
    "    if (str1===undefined || str2===undefined) return false;", 
    "    length = str1.length > str2.length ? str2.length : str1.length;", 
    "    for (var i=0; i < length; i++) {", 
    "        if (str1.substr(i,i+1)==str2.substr(i,i+1))", 
    "            continue;", 
    "        ", 
    "        if (parseInt(str1.substr(i,i+1),36) < parseInt(str2.substr(i,i+1),36))", 
    "            return true;", 
    "        ", 
    "        return false;", 
    "    }", 
    "    return false;", 
    "}", 
    "", 
    "function strToHexColor(str) {", 
    "    if (str===undefined) str = 'undefined';", 
    "    var nr = 1000000000;", 
    "    for (var i=0; i < str.length; i++) {", 
    "        nr = nr + parseInt(str.substr(i,i+1),36);", 
    "    }", 
    "    ", 
    "    return '#' + nr.toString(16).toUpperCase().substring(1,7);", 
    "}"
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "1.0.7", 
  "async": 1, 
  "type": "macro"
}